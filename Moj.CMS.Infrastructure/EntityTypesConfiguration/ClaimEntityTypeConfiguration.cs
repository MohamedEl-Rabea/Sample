using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Moj.CMS.Domain.Aggregates.Claim;

namespace Moj.CMS.Infrastructure.EntityTypesConfiguration
{
    public class ClaimEntityTypeConfiguration : EntityTypeConfigurationBase<Claim>
    {
        public override void ConfigureEntity(EntityTypeBuilder<Claim> builder)
        {
            builder.ToTable("Claims");

            builder.Property(d => d.Id).UseHiLo("ClaimSequenceHilo");
            builder.Property(c => c.CaseNumber).IsRequired();
            builder.Property(c => c.ComplaintPartyNumber).IsRequired();
            builder.Property(c => c.PromissoryNumber).IsRequired();
            builder.Property(c => c.ClaimDateTime).HasColumnName("ClaimDate").IsRequired();

            builder.OwnsOne(c => c.CloseDetails, closeDetails =>
            {
                closeDetails.Property("ClaimId").UseHiLo("ClaimSequenceHilo");
                closeDetails.Property(a => a.ReferenceNumber).HasColumnName("CloseReferenceNumber").IsRequired();
                closeDetails.Property(a => a.CloseDate).HasColumnName("CloseDate");
            });

            builder.OwnsOne(c => c.ClaimStatus, status =>
            {
                status.Property("ClaimId").UseHiLo("ClaimSequenceHilo");
                status.Property(a => a.FinancialStatus).HasColumnName("FinancialStatus");
                status.Property(a => a.Status).HasColumnName("Status");
            });

            builder.OwnsOne(c => c.BasicAmount, amount =>
            {
                //ClaimId is a shadow prop (not real prop or col in DB) generated by EFCore
                //Ef core 5 bug:https://github.com/dotnet/efcore/issues/20740
                amount.Property("ClaimId").UseHiLo("ClaimSequenceHilo");
                amount.Property(a => a.Value).HasColumnName("BasicAmount");
                amount.Property(a => a.CurrencyIso).HasMaxLength(3).HasColumnName("Currency").IsRequired();
            }).Navigation(x => x.BasicAmount).IsRequired();

            builder.OwnsOne(c => c.RequiredAmount, amount =>
            {
                amount.Property("ClaimId").UseHiLo("ClaimSequenceHilo");
                amount.Property(a => a.Value).HasColumnName("TotalAmount");
                amount.Property(a => a.CurrencyIso).HasMaxLength(3).HasColumnName("Currency").IsRequired();
            }).Navigation(x => x.RequiredAmount).IsRequired();

            builder.OwnsOne(c => c.RemainingAmount, amount =>
            {
                amount.Property("ClaimId").UseHiLo("ClaimSequenceHilo");
                amount.Property(a => a.Value).HasColumnName("RemainingAmount");
                amount.Property(a => a.CurrencyIso).HasMaxLength(3).HasColumnName("Currency").IsRequired();
            }).Navigation(x => x.RemainingAmount).IsRequired();

            builder.OwnsOne(c => c.TotalRequiredAmount, amount =>
            {
                amount.Property("ClaimId").UseHiLo("ClaimSequenceHilo");
                amount.Property(a => a.Value).HasColumnName("TotalRequiredAmount");
                amount.Property(a => a.CurrencyIso).HasMaxLength(3).HasColumnName("Currency").IsRequired();
            }).Navigation(x => x.TotalRequiredAmount).IsRequired();

            builder.OwnsOne(c => c.TotalRemainingAmount, amount =>
            {
                amount.Property("ClaimId").UseHiLo("ClaimSequenceHilo");
                amount.Property(a => a.Value).HasColumnName("TotalRemainingAmount");
                amount.Property(a => a.CurrencyIso).HasMaxLength(3).HasColumnName("Currency").IsRequired();
            }).Navigation(x => x.TotalRemainingAmount).IsRequired();

            builder.HasMany(c => c.ClaimDetailsList)
                .WithOne()
                .HasForeignKey("ClaimId")
                .IsRequired();

            builder.OwnsMany(c => c.ClaimHistoryList, history =>
            {
                history.ToTable("ClaimHistory");
                history.WithOwner().HasForeignKey("ClaimId");
                history.Property<int>("Id");
                history.HasKey("Id");

                history.OwnsOne(c => c.TotalAmountBefore, amount =>
                {
                    amount.Property(a => a.Value).HasColumnName("TotalAmountBefore");
                    amount.Property(a => a.CurrencyIso).HasMaxLength(3).HasColumnName("Currency").IsRequired();
                }).Navigation(x => x.TotalAmountBefore).IsRequired();

                history.OwnsOne(c => c.TotalAmountAfter, amount =>
                {
                    amount.Property(a => a.Value).HasColumnName("TotalAmountAfter");
                    amount.Property(a => a.CurrencyIso).HasMaxLength(3).HasColumnName("Currency").IsRequired();
                }).Navigation(x => x.TotalAmountAfter).IsRequired();
            });

            builder.OwnsMany(c => c.Extras, extra =>
            {
                extra.ToTable("ClaimExtras");
                extra.WithOwner().HasForeignKey("ClaimId");
                extra.HasKey(e => e.Id);

                extra.OwnsOne(e => e.Amount, amount =>
                {
                    amount.Property(a => a.Value).HasColumnName("Amount");
                    amount.Property(a => a.CurrencyIso).HasMaxLength(3).HasColumnName("Currency").IsRequired();
                }).Navigation(x => x.Amount).IsRequired();

                extra.OwnsOne(e => e.Remaining, amount =>
                {
                    amount.Property(a => a.Value).HasColumnName("Remaining");
                    amount.Property(a => a.CurrencyIso).HasMaxLength(3).HasColumnName("Currency").IsRequired();
                }).Navigation(x => x.Remaining).IsRequired();
            });

            //TODO:Check RowVersion
        }
    }
}
